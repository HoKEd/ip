package cinnamontest.stepdefs;

import com.google.inject.Inject;
import com.nttdata.cinnamon.driver.Driver;
import cinnamontest.pages.LoggingInPage;
import cinnamontest.pages.GherkinFeatureLexerPage;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.And;
import cinnamontest.pages.NativeCJavaLexerPage;
import cinnamontest.pages.GherkinFeatureLexerparserPage;
import cinnamontest.pages.PrettyPrinterPage;
import cinnamontest.pages.FeatureTextPage;
import cinnamontest.pages.GherkinStepsParserPage;
import org.openqa.selenium.interactions.Actions;


public class stepDefsThen extends BaseStep{ 
	private final LoggingInPage logginginpage;

	private final Driver driver;

	private final FeatureTextPage featuretextpage;

	private final GherkinStepsParserPage gherkinstepsparserpage;

	private final GherkinFeatureLexerparserPage gherkinfeaturelexerparserpage;

	private final NativeCJavaLexerPage nativecjavalexerpage;

	private final PrettyPrinterPage prettyprinterpage;

	private final GherkinFeatureLexerPage gherkinfeaturelexerpage;


	/** Method autogenerated by iBDD tool
	 *	 No code could be implemented for this operation.
	 *	 Please retrain the AI model to support it or add code manually.
	 */
	@Then("^there should be parse errors on lines 1 through 3$")
	public void thereShouldBeParseErrorsLinesThrough() {
		//TODO It was not possible to generate code for this operation
	}

	/** Method autogenerated by iBDD tool
	 *	 Code implemented with a probability of: 0.6561389182242913
	 */
	@Then("^there should be no parse errors$")
	public void thereShouldBeNoParseErrors(String time) {
		try {
			long timeAux = Long.parseLong(time);
			Thread.sleep(timeAux);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/** Method autogenerated by iBDD tool
	 *	 Code implemented with a probability of: 0.6939111352895727
	 */
	@Then("^there should be a parse error on line 1$")
	public void thereShouldBeParseErrorLine() {
		WebElement obj = this.gherkinstepsparserpage.line;
		Actions actions = new Actions(driver);
		actions.doubleClick(obj).perform();
	}

	/** Method autogenerated by iBDD tool
	 *	 Code implemented with a probability of: 0.6671632260197362
	 */
	@Then("^the following files should have errors:$")
	public void followingFilesShouldHaveErrors(String time) {
		try {
			long timeAux = Long.parseLong(time);
			Thread.sleep(timeAux);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/** Method autogenerated by iBDD tool
	 *	 Code implemented with a probability of: 0.6559233992941951
	 */
	@Then("^there should be parse errors on lines 1 and 2$")
	public void thereShouldBeParseErrorsLinesAnd(String time) {
		try {
			long timeAux = Long.parseLong(time);
			Thread.sleep(timeAux);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/** null
	 */
	@Inject
	public stepDefsThen(final Driver driver, final LoggingInPage logginginpage) {
		this.driver = driver;
		this.driver.init();
		this.logginginpage = logginginpage;
	}

}